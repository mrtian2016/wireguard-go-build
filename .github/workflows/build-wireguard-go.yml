# .github/workflows/build-wireguard-go.yml
name: Build WireGuard-Go Binaries

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      wireguard_version:
        description: 'WireGuard-Go version/tag to build'
        required: false
        default: 'latest'

env:
  WIREGUARD_GO_REPO: 'https://git.zx2c4.com/wireguard-go'
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            os: ubuntu-latest
          - goos: linux
            goarch: arm64
            os: ubuntu-latest
          - goos: windows
            goarch: amd64
            os: ubuntu-latest
          - goos: darwin
            goarch: amd64
            os: macos-latest
          - goos: darwin
            goarch: arm64
            os: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Clone WireGuard-Go
      run: |
        git clone ${{ env.WIREGUARD_GO_REPO }} wireguard-go
        cd wireguard-go
        
        if [ "${{ github.event.inputs.wireguard_version }}" = "latest" ] || [ -z "${{ github.event.inputs.wireguard_version }}" ]; then
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "main")
          git checkout $LATEST_TAG || git checkout main
        else
          git checkout ${{ github.event.inputs.wireguard_version }}
        fi
        
        git describe --tags --always > ../VERSION.txt

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        cd wireguard-go
        
        BINARY_NAME="wireguard-go"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        VERSION=$(cat ../VERSION.txt)
        OUTPUT_DIR="wireguard-go-${GOOS}-${GOARCH}-${VERSION}"
        mkdir -p "../${OUTPUT_DIR}"
        
        echo "Building for $GOOS/$GOARCH..."
        CGO_ENABLED=0 go build \
          -v \
          -trimpath \
          -ldflags="-s -w" \
          -o "../${OUTPUT_DIR}/${BINARY_NAME}" \
          ./
        
        # 创建 README
        cat > "../${OUTPUT_DIR}/README.txt" << EOF
        WireGuard-Go Binary
        Version: ${VERSION}
        Platform: ${GOOS}/${GOARCH}
        Built: $(date -u)
        EOF
        
        cp ../VERSION.txt "../${OUTPUT_DIR}/"
        
        ls -lh "../${OUTPUT_DIR}/${BINARY_NAME}"

    - name: Create archive
      run: |
        VERSION=$(cat VERSION.txt)
        ARCHIVE_BASE="wireguard-go-${{ matrix.goos }}-${{ matrix.goarch }}-${VERSION}"

        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r "${ARCHIVE_BASE}.zip" "${ARCHIVE_BASE}"
          sha256sum "${ARCHIVE_BASE}.zip" > "${ARCHIVE_BASE}.zip.sha256"
        else
          tar czf "${ARCHIVE_BASE}.tar.gz" "${ARCHIVE_BASE}"
          sha256sum "${ARCHIVE_BASE}.tar.gz" > "${ARCHIVE_BASE}.tar.gz.sha256"
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: wireguard-go-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          wireguard-go-*.${{ matrix.goos == 'windows' && 'zip' || 'tar.gz' }}
          wireguard-go-*.sha256

  test:
    name: Test ${{ matrix.name }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest
            artifact: wireguard-go-linux-amd64
            ext: tar.gz
          - name: macOS
            os: macos-latest
            artifact: wireguard-go-darwin-amd64
            ext: tar.gz
          - name: Windows
            os: windows-latest
            artifact: wireguard-go-windows-amd64
            ext: zip
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact }}

    - name: Test binary
      shell: bash
      run: |
        # 解压
        if [[ "${{ matrix.ext }}" == "zip" ]]; then
          unzip wireguard-go-*.${{ matrix.ext }}
          BINARY="wireguard-go.exe"
        else
          tar xzf wireguard-go-*.${{ matrix.ext }}
          BINARY="wireguard-go"
        fi
        
        # 进入目录
        cd wireguard-go-*/
        
        # 权限
        [[ "$RUNNER_OS" != "Windows" ]] && chmod +x "$BINARY"
        
        # 测试
        ls -lh "$BINARY"
        [[ "$RUNNER_OS" != "Windows" ]] && file "$BINARY"
        ./"$BINARY" --version 2>&1 || echo "✅ Binary is valid"

  summary:
    name: Build Summary
    needs: [build, test]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - run: echo "✅ Build and test completed!"