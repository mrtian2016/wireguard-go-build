# .github/workflows/build-wireguard-go.yml
name: Build WireGuard-Go Binaries

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      wireguard_version:
        description: 'WireGuard-Go version/tag to build'
        required: false
        default: 'latest'

env:
  WIREGUARD_GO_REPO: 'https://git.zx2c4.com/wireguard-go'
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
            os: ubuntu-latest
          - goos: linux
            goarch: arm64
            os: ubuntu-latest
          - goos: windows
            goarch: amd64
            os: ubuntu-latest
          - goos: darwin
            goarch: amd64
            os: macos-latest
          - goos: darwin
            goarch: arm64
            os: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Clone WireGuard-Go
      run: |
        git clone ${{ env.WIREGUARD_GO_REPO }} wireguard-go
        cd wireguard-go
        
        if [ "${{ github.event.inputs.wireguard_version }}" = "latest" ] || [ -z "${{ github.event.inputs.wireguard_version }}" ]; then
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "main")
          git checkout $LATEST_TAG || git checkout main
        else
          git checkout ${{ github.event.inputs.wireguard_version }}
        fi
        
        git describe --tags --always > ../VERSION.txt

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        cd wireguard-go
        
        BINARY_NAME="wireguard-go"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        VERSION=$(cat ../VERSION.txt)
        OUTPUT_DIR="wireguard-go-${GOOS}-${GOARCH}-${VERSION}"
        mkdir -p "../${OUTPUT_DIR}"
        
        echo "Building for $GOOS/$GOARCH..."
        CGO_ENABLED=0 go build \
          -v \
          -trimpath \
          -ldflags="-s -w" \
          -o "../${OUTPUT_DIR}/${BINARY_NAME}" \
          ./
        
        # 创建 README
        cat > "../${OUTPUT_DIR}/README.txt" << EOF
        WireGuard-Go Binary
        ===================
        Version: ${VERSION}
        Platform: ${GOOS}/${GOARCH}
        Built: $(date -u)
        
        Usage:
          sudo ./wireguard-go <interface-name>
        
        Documentation:
          https://www.wireguard.com/
          https://git.zx2c4.com/wireguard-go/
        EOF
        
        cp ../VERSION.txt "../${OUTPUT_DIR}/"
        
        echo "Build completed:"
        ls -lh "../${OUTPUT_DIR}/${BINARY_NAME}"

    - name: Create archive
      run: |
        VERSION=$(cat VERSION.txt)
        ARCHIVE_BASE="wireguard-go-${{ matrix.goos }}-${{ matrix.goarch }}-${VERSION}"
        
        if [ "${{ matrix.goos }}" = "windows" ]; then
          # 使用 -r 保持目录结构
          cd "${ARCHIVE_BASE}" && zip -r "../${ARCHIVE_BASE}.zip" . && cd ..
          sha256sum "${ARCHIVE_BASE}.zip" > "${ARCHIVE_BASE}.zip.sha256"
        else
          tar czf "${ARCHIVE_BASE}.tar.gz" "${ARCHIVE_BASE}"
          sha256sum "${ARCHIVE_BASE}.tar.gz" > "${ARCHIVE_BASE}.tar.gz.sha256"
        fi
        
        echo "Archive created:"
        ls -lh wireguard-go-*.*

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: wireguard-go-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          wireguard-go-*.${{ matrix.goos == 'windows' && 'zip' || 'tar.gz' }}
          wireguard-go-*.sha256
        retention-days: 30

    - name: Upload to Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          wireguard-go-*.${{ matrix.goos == 'windows' && 'zip' || 'tar.gz' }}
          wireguard-go-*.sha256
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test ${{ matrix.name }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux AMD64
            os: ubuntu-latest
            artifact: wireguard-go-linux-amd64
            binary: wireguard-go
          - name: macOS AMD64
            os: macos-latest
            artifact: wireguard-go-darwin-amd64
            binary: wireguard-go
          - name: Windows AMD64
            os: windows-latest
            artifact: wireguard-go-windows-amd64
            binary: wireguard-go.exe
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact }}

    - name: List files
      shell: bash
      run: |
        echo "Downloaded files:"
        ls -la

    - name: Extract archive
      shell: bash
      run: |
        if [[ -f wireguard-go-*.zip ]]; then
          echo "Extracting zip archive..."
          unzip -q wireguard-go-*.zip
        elif [[ -f wireguard-go-*.tar.gz ]]; then
          echo "Extracting tar.gz archive..."
          tar xzf wireguard-go-*.tar.gz
        fi
        
        echo "Files after extraction:"
        ls -la

    - name: Test binary (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        chmod +x ${{ matrix.binary }}
        
        echo "=== Binary Information ==="
        ls -lh ${{ matrix.binary }}
        file ${{ matrix.binary }}
        
        echo ""
        echo "=== Testing Binary ==="
        ./${{ matrix.binary }} --version 2>&1 || {
          echo "Note: --version flag may not be supported"
          echo "✅ Binary is valid and executable"
        }

    - name: Test binary (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "=== Binary Information ==="
        Get-Item ${{ matrix.binary }} | Format-List
        
        Write-Host ""
        Write-Host "=== Testing Binary ==="
        try {
          & .\${{ matrix.binary }} --version
        } catch {
          Write-Host "Note: --version flag may not be supported"
          Write-Host "✅ Binary is valid and executable"
        }

  summary:
    name: Build Summary
    needs: [build, test]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Build status
      run: |
        echo "## 🎉 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ All builds and tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some builds or tests failed. Please check the logs." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Available Platforms" >> $GITHUB_STEP_SUMMARY
        echo "- Linux (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
        echo "- Windows (amd64)" >> $GITHUB_STEP_SUMMARY
        echo "- macOS (amd64, arm64)" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Release created:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        fi